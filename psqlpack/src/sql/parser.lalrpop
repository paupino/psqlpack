use rust_decimal::Decimal;

use crate::sql::ast::*;
use crate::sql::lexer;

grammar<'input>;

extern {
    enum lexer::Token {
        "(" => lexer::Token::LeftBracket,
        ")" => lexer::Token::RightBracket,
        "[" => lexer::Token::LeftSquare,
        "]" => lexer::Token::RightSquare,

        "," => lexer::Token::Comma,
        ":" => lexer::Token::Colon,
        ";" => lexer::Token::Semicolon,
        "=" => lexer::Token::Equals,
        "." => lexer::Token::Period,

        ACTION => lexer::Token::ACTION,
        ARRAY => lexer::Token::ARRAY,
        AS => lexer::Token::AS,
        ASC => lexer::Token::ASC,
        BIGINT => lexer::Token::BIGINT,
        BIGSERIAL => lexer::Token::BIGSERIAL,
        BIT => lexer::Token::BIT,
        BOOL => lexer::Token::BOOL,
        BOOLEAN => lexer::Token::BOOLEAN,
        BTREE => lexer::Token::BTREE,
        CASCADE => lexer::Token::CASCADE,
        CONSTRAINT => lexer::Token::CONSTRAINT,
        CHAR => lexer::Token::CHAR,
        CHARACTER => lexer::Token::CHARACTER,
        CREATE => lexer::Token::CREATE,
        DATE => lexer::Token::DATE,
        DEFAULT => lexer::Token::DEFAULT,
        DELETE => lexer::Token::DELETE,
        DESC => lexer::Token::DESC,
        DOUBLE => lexer::Token::DOUBLE,
        ENUM => lexer::Token::ENUM,
        EXTENSION => lexer::Token::EXTENSION,
        FILLFACTOR => lexer::Token::FILLFACTOR,
        FIRST => lexer::Token::FIRST,
        FOREIGN => lexer::Token::FOREIGN,
        FULL => lexer::Token::FULL,
        FUNCTION => lexer::Token::FUNCTION,
        GIN => lexer::Token::GIN,
        GIST => lexer::Token::GIST,
        HASH => lexer::Token::HASH,
        IN => lexer::Token::IN,
        INDEX => lexer::Token::INDEX,
        INOUT => lexer::Token::INOUT,
        INT => lexer::Token::INT,
        INT2 => lexer::Token::INT2,
        INT4 => lexer::Token::INT4,
        INT8 => lexer::Token::INT8,
        INTEGER => lexer::Token::INTEGER,
        JSON => lexer::Token::JSON,
        JSONB => lexer::Token::JSONB,
        KEY => lexer::Token::KEY,
        LANGUAGE => lexer::Token::LANGUAGE,
        LAST => lexer::Token::LAST,
        MATCH => lexer::Token::MATCH,
        MONEY => lexer::Token::MONEY,
        NO => lexer::Token::NO,
        NOT => lexer::Token::NOT,
        NULL => lexer::Token::NULL,
        NULLS => lexer::Token::NULLS,
        NUMERIC => lexer::Token::NUMERIC,
        ON => lexer::Token::ON,
        OR => lexer::Token::OR,
        OUT => lexer::Token::OUT,
        PARTIAL => lexer::Token::PARTIAL,
        PRECISION => lexer::Token::PRECISION,
        PRIMARY => lexer::Token::PRIMARY,
        REAL => lexer::Token::REAL,
        REFERENCES => lexer::Token::REFERENCES,
        REPLACE => lexer::Token::REPLACE,
        RESTRICT => lexer::Token::RESTRICT,
        RETURNS => lexer::Token::RETURNS,
        SCHEMA => lexer::Token::SCHEMA,
        SERIAL => lexer::Token::SERIAL,
        SERIAL2 => lexer::Token::SERIAL2,
        SERIAL4 => lexer::Token::SERIAL4,
        SERIAL8 => lexer::Token::SERIAL8,
        SET => lexer::Token::SET,
        SETOF => lexer::Token::SETOF,
        SIMPLE => lexer::Token::SIMPLE,
        SMALLINT => lexer::Token::SMALLINT,
        SMALLSERIAL => lexer::Token::SMALLSERIAL,
        TABLE => lexer::Token::TABLE,
        TEXT => lexer::Token::TEXT,
        TIME => lexer::Token::TIME,
        TIMESTAMP => lexer::Token::TIMESTAMP,
        TIMESTAMPTZ => lexer::Token::TIMESTAMPTZ,
        TIMETZ => lexer::Token::TIMETZ,
        TYPE => lexer::Token::TYPE,
        UNIQUE => lexer::Token::UNIQUE,
        UPDATE => lexer::Token::UPDATE,
        USING => lexer::Token::USING,
        UUID => lexer::Token::UUID,
        VARBIT => lexer::Token::VARBIT,
        VARCHAR => lexer::Token::VARCHAR,
        VARYING => lexer::Token::VARYING,
        VARIADIC => lexer::Token::VARIADIC,
        WITH => lexer::Token::WITH,
        WITHOUT => lexer::Token::WITHOUT,
        ZONE => lexer::Token::ZONE,

        Ident => lexer::Token::Identifier(<String>),
        Decimal => lexer::Token::Decimal(<Decimal>),
        Digit => lexer::Token::Digit(<i32>),
        Boolean => lexer::Token::Boolean(<bool>),
        String => lexer::Token::StringValue(<String>),
        Literal => lexer::Token::Literal(<String>),
    }
}

pub StatementList: Vec<Statement> = {
    <v:StatementList> <stmt:Statement> => {
        let mut v = v;
        v.push(stmt);
        v
    },
    <Statement> => vec!(<>),
};

Statement: Statement = {
    CREATE EXTENSION <name:Ident> ";"? => Statement::Error(ErrorKind::ExtensionNotSupported(name)),
    CREATE (OR REPLACE)? FUNCTION <name:ObjectName> "(" ")" RETURNS <return_type:FunctionReturnType> AS <body:Literal> LANGUAGE <lang:FunctionType> ";"? => Statement::Function(FunctionDefinition {
        name,
        arguments: Vec::new(),
        return_type: return_type,
        body,
        language: lang,
    }),
    CREATE (OR REPLACE)? FUNCTION <name:ObjectName> "(" <args:FunctionArgumentList> ")" RETURNS <return_type:FunctionReturnType> AS <body:Literal> LANGUAGE <lang:FunctionType> ";"? => Statement::Function(FunctionDefinition {
        name,
        arguments: args,
        return_type,
        body,
        language: lang,
    }),
    CREATE <unique:UNIQUE?> INDEX <name:Ident> ON <table:ObjectName> <index_type:IndexType?> "(" <columns:IndexColumnList> ")" <storage_parameters:WithIndexParameters?> ";"? => Statement::Index(IndexDefinition {
        name,
        table,
        columns,
        unique: unique.is_some(),
        index_type,
        storage_parameters,
    }),
    CREATE SCHEMA <name:Ident> ";"? => Statement::Schema(SchemaDefinition {
        name,
    }),
    CREATE TABLE <name:ObjectName> "(" <columns:ColumnDefinitionList> "," <table_constraints:TableConstraintList> ")" ";"? => Statement::Table(TableDefinition {
        name,
        columns,
        constraints: table_constraints,
    }),
    CREATE TABLE <name:ObjectName> "(" <columns:ColumnDefinitionList> ")" ";"? => Statement::Table(TableDefinition {
        name,
        columns,
        constraints: Vec::new(),
    }),
    CREATE TYPE <name:ObjectName> AS ENUM "(" <values:EnumValueList> ")" ";"? => Statement::Type(TypeDefinition {
        name,
        kind: TypeDefinitionKind::Enum(values),
    }),
};

ObjectName: ObjectName = {
    <schema:Ident> "." <name:Ident> => ObjectName { schema: Some(schema), name: name },
    <name:Ident> => ObjectName { schema: None, name: name },
};

ColumnDefinitionList: Vec<ColumnDefinition> = {
    <v:ColumnDefinitionList> "," <c:ColumnDefinition> => {
        let mut v = v;
        v.push(c);
        v
    },
    <ColumnDefinition> => vec!(<>)
};

ColumnDefinition: ColumnDefinition = {
    <name:Ident> <t:SqlType> <constraints:ColumnConstraintList> => ColumnDefinition {
        name: name,
        sql_type: t,
        constraints: constraints,
    },
    <name:Ident> <t:SqlType> => ColumnDefinition {
        name: name,
        sql_type: t,
        constraints: Vec::new(),
    },
};

ColumnList: Vec<String> = {
    <v:ColumnList> "," <c:Ident> => {
        let mut v = v;
        v.push(c);
        v
    },
    <Ident> => vec!(<>),
};

pub FunctionArgumentList: Vec<FunctionArgument> = {
    <v:FunctionArgumentList> "," <a:FunctionArgument> => {
        let mut v = v;
        v.push(a);
        v
    },
    <FunctionArgument> => vec!(<>)
};

FunctionArgument: FunctionArgument = {
    <mode:FunctionArgumentMode?>
    <name:Ident>
    <sql_type:SqlType>
    <default:FunctionArgumentDefault?> => FunctionArgument {
        mode,
        name: Some(name),
        sql_type,
        default,
    },
    <mode:FunctionArgumentMode?>
    <sql_type:SqlType>
    <default:FunctionArgumentDefault?> => FunctionArgument {
        mode,
        name: None,
        sql_type,
        default,
    }
};

FunctionArgumentMode: FunctionArgumentMode = {
    IN => FunctionArgumentMode::In,
    OUT => FunctionArgumentMode::Out,
    INOUT => FunctionArgumentMode::InOut,
    VARIADIC => FunctionArgumentMode::Variadic,
};

FunctionArgumentDefault: AnyValue = {
    DEFAULT <AnyValue> => <>,
};

pub FunctionReturnType: FunctionReturnType = {
    TABLE "(" <columns:ColumnDefinitionList> ")" => FunctionReturnType::Table(columns),
    SETOF <SqlType> => FunctionReturnType::SetOf(<>),
    <SqlType> => FunctionReturnType::SqlType(<>),
};

FunctionType: FunctionLanguage = {
    <name:Ident> => {
        match &name.to_lowercase()[..] {
            "c" => FunctionLanguage::C,
            "internal" => FunctionLanguage::Internal,
            "plpgsql" => FunctionLanguage::PostgreSQL,
            "sql" => FunctionLanguage::SQL,
            _ => FunctionLanguage::Custom(name), // Use the raw name
        }
    }
};

TableConstraintList: Vec<TableConstraint> = {
    <v:TableConstraintList> "," <c:TableConstraint> => {
        let mut v = v;
        v.push(c);
        v
    },
    <TableConstraint> => vec!(<>),
};

TableConstraint: TableConstraint = {
    CONSTRAINT <name:Ident> PRIMARY KEY "(" <columns:ColumnList> ")" <parameters:WithIndexParameters?> => TableConstraint::Primary {
        name: name,
        columns: columns,
        parameters: parameters
    },
    CONSTRAINT <name:Ident> FOREIGN KEY "(" <columns:ColumnList> ")" REFERENCES <ref_table:ObjectName> "(" <ref_columns:ColumnList> ")" <match_type:MatchType?> <events:ConstraintEventList?> => TableConstraint::Foreign {
        name: name,
        columns: columns,
        ref_table: ref_table,
        ref_columns: ref_columns,
        match_type: match_type,
        events: events,
    },
};

WithIndexParameters: Vec<IndexParameter> = {
    WITH "(" <IndexParameterList> ")" => <>,
};

IndexParameterList: Vec<IndexParameter> = {
    <v:IndexParameterList> "," <i:IndexParameter> => {
        let mut v = v;
        v.push(i);
        v
    },
    <IndexParameter> => vec!(<>),
};

IndexParameter: IndexParameter = {
    FILLFACTOR "=" <Digit> => IndexParameter::FillFactor(<> as u32),
};

MatchType: ForeignConstraintMatchType = {
    MATCH SIMPLE => ForeignConstraintMatchType::Simple,
    MATCH PARTIAL => ForeignConstraintMatchType::Partial,
    MATCH FULL => ForeignConstraintMatchType::Full,
};

ConstraintEventList: Vec<ForeignConstraintEvent> = {
    <v:ConstraintEventList> <e:ConstraintEvent> => {
        let mut v = v;
        v.push(e);
        v
    },
    <ConstraintEvent> => vec!(<>),
};

ConstraintEvent: ForeignConstraintEvent = {
    ON DELETE <ForeignConstraintAction> => ForeignConstraintEvent::Delete(<>),
    ON UPDATE <ForeignConstraintAction> => ForeignConstraintEvent::Update(<>),
};

ForeignConstraintAction: ForeignConstraintAction = {
    NO ACTION => ForeignConstraintAction::NoAction,
    RESTRICT => ForeignConstraintAction::Restrict,
    CASCADE => ForeignConstraintAction::Cascade,
    SET NULL => ForeignConstraintAction::SetNull,
    SET DEFAULT => ForeignConstraintAction::SetDefault,
};

IndexColumnList: Vec<IndexColumn> = {
    <v:IndexColumnList> "," <c:IndexColumn> => {
        let mut v = v;
        v.push(c);
        v
    },
    <IndexColumn> => vec!(<>),
};

IndexColumn: IndexColumn = {
    <name:Ident> <order:IndexOrder?> <pos:IndexNullPosition?> => {
        IndexColumn {
            name: name,
            order: order,
            null_position: pos,
        }
    }
};

IndexOrder: IndexOrder = {
    ASC => IndexOrder::Ascending,
    DESC => IndexOrder::Descending,
};

IndexNullPosition: IndexPosition = {
    NULLS FIRST => IndexPosition::First,
    NULLS LAST => IndexPosition::Last,
};

IndexType: IndexType = {
    USING BTREE => IndexType::BTree,
    USING HASH => IndexType::Hash,
    USING GIST => IndexType::Gist,
    USING GIN => IndexType::Gin,
};

pub SqlType: SqlType = {
    <SimpleType> => SqlType::Simple(<>, None),
    <simple:SimpleType> <dim:ArrayDimension> => SqlType::Simple(simple, Some(dim)),

    <name:ObjectName> => SqlType::Custom(name, vec![], None),
    <name:ObjectName> <dim:ArrayDimension> => SqlType::Custom(name, vec![], Some(dim)),
    <name:ObjectName> "(" <modifiers:TypeModifierList> ")" =>
        SqlType::Custom(name, modifiers, None),
    <name:ObjectName> "(" <modifiers:TypeModifierList> ")" <dim:ArrayDimension> =>
        SqlType::Custom(name, modifiers, Some(dim)),
};

TypeModifierList: Vec<TypeModifier> = {
    <v:TypeModifierList> "," <t:TypeModifier> => {
        let mut v = v;
        v.push(t);
        v
    },
    <TypeModifier> => vec!(<>),
};

TypeModifier: TypeModifier = {
    <name:Ident> => TypeModifier::Ident(name),
    <d:Digit> => TypeModifier::Integer(d),
};

SimpleType: SimpleSqlType = {
    CHAR "(" <Digit> ")" => SimpleSqlType::FixedLengthString(<> as u32),
    CHAR => SimpleSqlType::FixedLengthString(1u32),
    CHARACTER "(" <Digit> ")" => SimpleSqlType::FixedLengthString(<> as u32),
    CHARACTER => SimpleSqlType::FixedLengthString(1u32),
    VARCHAR "(" <Digit> ")" => SimpleSqlType::VariableLengthString(<> as u32),
    VARCHAR => SimpleSqlType::UnsizedVariableLengthString,
    CHARACTER VARYING "(" <Digit> ")" => SimpleSqlType::VariableLengthString(<> as u32),
    CHARACTER VARYING => SimpleSqlType::UnsizedVariableLengthString,
    TEXT => SimpleSqlType::Text,

    BIT "(" <Digit> ")" => SimpleSqlType::FixedLengthBitString(<> as u32),
    VARBIT "(" <Digit> ")" => SimpleSqlType::VariableLengthBitString(<> as u32),
    BIT VARYING "(" <Digit> ")" => SimpleSqlType::VariableLengthBitString(<> as u32),
    SMALLINT => SimpleSqlType::SmallInteger,
    INT => SimpleSqlType::Integer,
    INTEGER => SimpleSqlType::Integer,
    BIGINT => SimpleSqlType::BigInteger,
    INT2 => SimpleSqlType::SmallInteger,
    INT4 => SimpleSqlType::Integer,
    INT8 => SimpleSqlType::BigInteger,

    JSON => SimpleSqlType::Json,
    JSONB => SimpleSqlType::Jsonb,

    SMALLSERIAL => SimpleSqlType::SmallSerial,
    SERIAL => SimpleSqlType::Serial,
    BIGSERIAL => SimpleSqlType::BigSerial,
    SERIAL2 => SimpleSqlType::SmallSerial,
    SERIAL4 => SimpleSqlType::Serial,
    SERIAL8 => SimpleSqlType::BigSerial,

    NUMERIC => SimpleSqlType::Numeric(None),
    NUMERIC "(" <m:Digit> ")" => SimpleSqlType::Numeric(Some((m as u32, 0))),
    NUMERIC "(" <m:Digit> "," <d:Digit> ")" => SimpleSqlType::Numeric(Some((m as u32, d as u32))),
    DOUBLE PRECISION => SimpleSqlType::Double,
    REAL => SimpleSqlType::Single,
    MONEY => SimpleSqlType::Money,
    BOOL => SimpleSqlType::Boolean,
    BOOLEAN => SimpleSqlType::Boolean,

    DATE => SimpleSqlType::Date,
    TIMESTAMP => SimpleSqlType::DateTime,
    TIMESTAMP WITHOUT TIME ZONE => SimpleSqlType::DateTime,
    TIMESTAMP WITH TIME ZONE => SimpleSqlType::DateTimeWithTimeZone,
    TIMESTAMPTZ => SimpleSqlType::DateTimeWithTimeZone,
    TIME => SimpleSqlType::Time,
    TIME WITHOUT TIME ZONE => SimpleSqlType::Time,
    TIME WITH TIME ZONE => SimpleSqlType::TimeWithTimeZone,
    TIMETZ => SimpleSqlType::TimeWithTimeZone,

    UUID => SimpleSqlType::Uuid,
};

ArrayDimension: u32 = {
    "[" "]" => 1u32,
    <dim:ArrayDimension> "[" "]" => dim + 1u32,
};

ColumnConstraintList: Vec<ColumnConstraint> = {
    <v:ColumnConstraintList> <q:ColumnConstraint> => {
        let mut v = v;
        v.push(q);
        v
    },
    <ColumnConstraint> => vec!(<>),
};

ColumnConstraint: ColumnConstraint = {
    DEFAULT <AnyValue> => ColumnConstraint::Default(<>),
    NULL => ColumnConstraint::Null,
    NOT NULL => ColumnConstraint::NotNull,
    UNIQUE => ColumnConstraint::Unique,
    PRIMARY KEY => ColumnConstraint::PrimaryKey,
};

AnyValue: AnyValue = {
    <PrimitiveValue> => <>,
    ARRAY <ArrayValue> => <>,
};

PrimitiveValue: AnyValue = {
    <Boolean> <Cast?> => AnyValue::Boolean(<>),
    <Digit> <Cast?> => AnyValue::Integer(<>),
    <Decimal> <Cast?> => AnyValue::Decimal(<>),
    <String> <Cast?> => AnyValue::String(<>),
    NULL <Cast?> => AnyValue::Null(<>),

    "(" <Boolean> ")" <Cast?> => AnyValue::Boolean(<>),
    "(" <Digit> ")" <Cast?> => AnyValue::Integer(<>),
    "(" <Decimal> ")" <Cast?> => AnyValue::Decimal(<>),
    "(" <String> ")" <Cast?> => AnyValue::String(<>),
    "(" NULL ")" <Cast?> => AnyValue::Null(<>),
};

Cast: SqlType = {
    ":" ":" <SqlType> => <>,
};

ArrayValue: AnyValue = {
    "[" <ArrayValueList> "]" <Cast?> => AnyValue::Array(<>),
};

// A little naive so we'll need to validate this within the AST
ArrayValueList: Vec<AnyValue> = {
    <v:ArrayValueList> "," <p:PrimitiveValue> => {
        let mut v = v;
        v.push(p);
        v
    },
    <v:ArrayValueList> "," <p:ArrayValue> => {
        let mut v = v;
        v.push(p);
        v
    },
    <PrimitiveValue> => vec!(<>),
    <ArrayValue> => vec!(<>),
};

EnumValueList: Vec<String> = {
    <v:EnumValueList> "," <e:String> => {
        let mut v = v;
        v.push(e);
        v
    },
    <String> => vec!(<>),
};
